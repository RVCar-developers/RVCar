// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mydataset_lane_mydataset_lane_Pipeline_VITIS_LOOP_438_1_VITIS_LOOP_439_2_VITIS_LOOP_440_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out4_V_address0,
        out4_V_ce0,
        out4_V_q0,
        out5_V_address0,
        out5_V_ce0,
        out5_V_we0,
        out5_V_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] out4_V_address0;
output   out4_V_ce0;
input  [15:0] out4_V_q0;
output  [9:0] out5_V_address0;
output   out5_V_ce0;
output   out5_V_we0;
output  [15:0] out5_V_d0;

reg ap_idle;
reg out4_V_ce0;
reg out5_V_ce0;
reg out5_V_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln438_fu_237_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln439_2_fu_431_p3;
reg   [6:0] select_ln439_2_reg_622;
wire   [9:0] add_ln441_fu_483_p2;
reg   [9:0] add_ln441_reg_627;
wire   [3:0] trunc_ln441_fu_489_p1;
reg   [3:0] trunc_ln441_reg_632;
wire   [9:0] add_ln441_2_fu_573_p2;
reg   [9:0] add_ln441_2_reg_638;
wire   [63:0] zext_ln441_fu_541_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln441_3_fu_579_p1;
reg   [4:0] c_fu_82;
wire   [4:0] add_ln440_fu_493_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_c_load;
reg   [2:0] w_fu_86;
wire   [2:0] select_ln439_3_fu_439_p3;
reg   [2:0] ap_sig_allocacmp_w_1;
reg   [7:0] indvar_flatten457_fu_90;
wire   [7:0] select_ln439_4_fu_505_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten457_load;
reg   [2:0] h_fu_94;
wire   [2:0] select_ln438_4_fu_373_p3;
reg   [2:0] ap_sig_allocacmp_h_1;
reg   [9:0] indvar_flatten485_fu_98;
wire   [9:0] add_ln438_fu_243_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten485_load;
wire   [5:0] p_shl_fu_163_p3;
wire   [3:0] p_shl1_fu_175_p3;
wire   [6:0] p_shl17_cast_fu_171_p1;
wire   [6:0] p_shl18_cast_fu_183_p1;
wire   [7:0] p_shl3_fu_201_p3;
wire   [9:0] p_shl2_fu_193_p3;
wire   [9:0] p_shl16_cast_fu_209_p1;
wire   [6:0] zext_ln439_fu_219_p1;
wire   [6:0] empty_fu_187_p2;
wire   [0:0] icmp_ln439_fu_255_p2;
wire   [2:0] add_ln438_1_fu_269_p2;
wire   [5:0] p_shl17_mid1_fu_275_p3;
wire   [3:0] p_shl18_mid1_fu_287_p3;
wire   [6:0] p_shl17_cast_mid1_fu_283_p1;
wire   [6:0] p_shl18_cast_mid1_fu_295_p1;
wire   [6:0] p_mid1469_fu_299_p2;
wire   [7:0] p_shl16_mid1_fu_321_p3;
wire   [9:0] p_shl15_mid1_fu_313_p3;
wire   [9:0] p_shl16_cast_mid1_fu_329_p1;
wire   [6:0] tmp_s_fu_223_p3;
wire   [6:0] add_ln441_1_fu_231_p2;
wire   [0:0] icmp_ln440_fu_361_p2;
wire   [0:0] xor_ln438_fu_355_p2;
wire   [2:0] select_ln438_fu_261_p3;
wire   [0:0] and_ln438_fu_367_p2;
wire   [0:0] or_ln439_fu_387_p2;
wire   [2:0] add_ln439_fu_381_p2;
wire   [6:0] p_mid5_fu_405_p3;
wire   [6:0] select_ln438_2_fu_339_p3;
wire   [6:0] select_ln439_1_fu_413_p3;
wire   [6:0] zext_ln439_1_fu_401_p1;
wire   [6:0] select_ln438_1_fu_305_p3;
wire   [6:0] add_ln441_4_fu_425_p2;
wire   [6:0] select_ln438_3_fu_347_p3;
wire   [9:0] p_mid1471_fu_333_p2;
wire   [9:0] empty_33_fu_213_p2;
wire   [4:0] tmp_1_fu_447_p4;
wire   [4:0] tmp_2_fu_457_p4;
wire   [4:0] select_ln438_5_fu_467_p3;
wire   [4:0] select_ln439_fu_393_p3;
wire   [9:0] tmp19_fu_475_p3;
wire   [9:0] zext_ln441_4_fu_421_p1;
wire   [7:0] add_ln439_1_fu_499_p2;
wire   [8:0] shl_ln1_fu_545_p3;
wire   [5:0] shl_ln441_1_fu_556_p3;
wire   [9:0] zext_ln441_2_fu_563_p1;
wire   [9:0] zext_ln441_1_fu_552_p1;
wire   [9:0] add_ln441_3_fu_567_p2;
wire  signed [9:0] sext_ln439_fu_538_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mydataset_lane_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln438_fu_237_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c_fu_82 <= add_ln440_fu_493_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_82 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln438_fu_237_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            h_fu_94 <= select_ln438_4_fu_373_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            h_fu_94 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln438_fu_237_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten457_fu_90 <= select_ln439_4_fu_505_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten457_fu_90 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln438_fu_237_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten485_fu_98 <= add_ln438_fu_243_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten485_fu_98 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln438_fu_237_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            w_fu_86 <= select_ln439_3_fu_439_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            w_fu_86 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln441_2_reg_638 <= add_ln441_2_fu_573_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln438_fu_237_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln441_reg_627 <= add_ln441_fu_483_p2;
        select_ln439_2_reg_622 <= select_ln439_2_fu_431_p3;
        trunc_ln441_reg_632 <= trunc_ln441_fu_489_p1;
    end
end

always @ (*) begin
    if (((icmp_ln438_fu_237_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_c_load = 5'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_82;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_h_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_h_1 = h_fu_94;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten457_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten457_load = indvar_flatten457_fu_90;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten485_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten485_load = indvar_flatten485_fu_98;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_w_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_w_1 = w_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out4_V_ce0 = 1'b1;
    end else begin
        out4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out5_V_ce0 = 1'b1;
    end else begin
        out5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        out5_V_we0 = 1'b1;
    end else begin
        out5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln438_1_fu_269_p2 = (ap_sig_allocacmp_h_1 + 3'd1);

assign add_ln438_fu_243_p2 = (ap_sig_allocacmp_indvar_flatten485_load + 10'd1);

assign add_ln439_1_fu_499_p2 = (ap_sig_allocacmp_indvar_flatten457_load + 8'd1);

assign add_ln439_fu_381_p2 = (select_ln438_fu_261_p3 + 3'd1);

assign add_ln440_fu_493_p2 = (select_ln439_fu_393_p3 + 5'd1);

assign add_ln441_1_fu_231_p2 = (zext_ln439_fu_219_p1 + empty_fu_187_p2);

assign add_ln441_2_fu_573_p2 = ($signed(add_ln441_3_fu_567_p2) + $signed(sext_ln439_fu_538_p1));

assign add_ln441_3_fu_567_p2 = (zext_ln441_2_fu_563_p1 + zext_ln441_1_fu_552_p1);

assign add_ln441_4_fu_425_p2 = (zext_ln439_1_fu_401_p1 + select_ln438_1_fu_305_p3);

assign add_ln441_fu_483_p2 = (tmp19_fu_475_p3 + zext_ln441_4_fu_421_p1);

assign and_ln438_fu_367_p2 = (xor_ln438_fu_355_p2 & icmp_ln440_fu_361_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_33_fu_213_p2 = (p_shl2_fu_193_p3 - p_shl16_cast_fu_209_p1);

assign empty_fu_187_p2 = (p_shl17_cast_fu_171_p1 - p_shl18_cast_fu_183_p1);

assign icmp_ln438_fu_237_p2 = ((ap_sig_allocacmp_indvar_flatten485_load == 10'd576) ? 1'b1 : 1'b0);

assign icmp_ln439_fu_255_p2 = ((ap_sig_allocacmp_indvar_flatten457_load == 8'd96) ? 1'b1 : 1'b0);

assign icmp_ln440_fu_361_p2 = ((ap_sig_allocacmp_c_load == 5'd16) ? 1'b1 : 1'b0);

assign or_ln439_fu_387_p2 = (icmp_ln439_fu_255_p2 | and_ln438_fu_367_p2);

assign out4_V_address0 = zext_ln441_fu_541_p1;

assign out5_V_address0 = zext_ln441_3_fu_579_p1;

assign out5_V_d0 = out4_V_q0;

assign p_mid1469_fu_299_p2 = (p_shl17_cast_mid1_fu_283_p1 - p_shl18_cast_mid1_fu_295_p1);

assign p_mid1471_fu_333_p2 = (p_shl15_mid1_fu_313_p3 - p_shl16_cast_mid1_fu_329_p1);

assign p_mid5_fu_405_p3 = {{add_ln439_fu_381_p2}, {4'd0}};

assign p_shl15_mid1_fu_313_p3 = {{add_ln438_1_fu_269_p2}, {7'd0}};

assign p_shl16_cast_fu_209_p1 = p_shl3_fu_201_p3;

assign p_shl16_cast_mid1_fu_329_p1 = p_shl16_mid1_fu_321_p3;

assign p_shl16_mid1_fu_321_p3 = {{add_ln438_1_fu_269_p2}, {5'd0}};

assign p_shl17_cast_fu_171_p1 = p_shl_fu_163_p3;

assign p_shl17_cast_mid1_fu_283_p1 = p_shl17_mid1_fu_275_p3;

assign p_shl17_mid1_fu_275_p3 = {{add_ln438_1_fu_269_p2}, {3'd0}};

assign p_shl18_cast_fu_183_p1 = p_shl1_fu_175_p3;

assign p_shl18_cast_mid1_fu_295_p1 = p_shl18_mid1_fu_287_p3;

assign p_shl18_mid1_fu_287_p3 = {{add_ln438_1_fu_269_p2}, {1'd0}};

assign p_shl1_fu_175_p3 = {{ap_sig_allocacmp_h_1}, {1'd0}};

assign p_shl2_fu_193_p3 = {{ap_sig_allocacmp_h_1}, {7'd0}};

assign p_shl3_fu_201_p3 = {{ap_sig_allocacmp_h_1}, {5'd0}};

assign p_shl_fu_163_p3 = {{ap_sig_allocacmp_h_1}, {3'd0}};

assign select_ln438_1_fu_305_p3 = ((icmp_ln439_fu_255_p2[0:0] == 1'b1) ? p_mid1469_fu_299_p2 : empty_fu_187_p2);

assign select_ln438_2_fu_339_p3 = ((icmp_ln439_fu_255_p2[0:0] == 1'b1) ? 7'd0 : tmp_s_fu_223_p3);

assign select_ln438_3_fu_347_p3 = ((icmp_ln439_fu_255_p2[0:0] == 1'b1) ? p_mid1469_fu_299_p2 : add_ln441_1_fu_231_p2);

assign select_ln438_4_fu_373_p3 = ((icmp_ln439_fu_255_p2[0:0] == 1'b1) ? add_ln438_1_fu_269_p2 : ap_sig_allocacmp_h_1);

assign select_ln438_5_fu_467_p3 = ((icmp_ln439_fu_255_p2[0:0] == 1'b1) ? tmp_1_fu_447_p4 : tmp_2_fu_457_p4);

assign select_ln438_fu_261_p3 = ((icmp_ln439_fu_255_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_w_1);

assign select_ln439_1_fu_413_p3 = ((and_ln438_fu_367_p2[0:0] == 1'b1) ? p_mid5_fu_405_p3 : select_ln438_2_fu_339_p3);

assign select_ln439_2_fu_431_p3 = ((and_ln438_fu_367_p2[0:0] == 1'b1) ? add_ln441_4_fu_425_p2 : select_ln438_3_fu_347_p3);

assign select_ln439_3_fu_439_p3 = ((and_ln438_fu_367_p2[0:0] == 1'b1) ? add_ln439_fu_381_p2 : select_ln438_fu_261_p3);

assign select_ln439_4_fu_505_p3 = ((icmp_ln439_fu_255_p2[0:0] == 1'b1) ? 8'd1 : add_ln439_1_fu_499_p2);

assign select_ln439_fu_393_p3 = ((or_ln439_fu_387_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_c_load);

assign sext_ln439_fu_538_p1 = $signed(select_ln439_2_reg_622);

assign shl_ln1_fu_545_p3 = {{trunc_ln441_reg_632}, {5'd0}};

assign shl_ln441_1_fu_556_p3 = {{trunc_ln441_reg_632}, {2'd0}};

assign tmp19_fu_475_p3 = {{select_ln438_5_fu_467_p3}, {select_ln439_fu_393_p3}};

assign tmp_1_fu_447_p4 = {{p_mid1471_fu_333_p2[9:5]}};

assign tmp_2_fu_457_p4 = {{empty_33_fu_213_p2[9:5]}};

assign tmp_s_fu_223_p3 = {{ap_sig_allocacmp_w_1}, {4'd0}};

assign trunc_ln441_fu_489_p1 = select_ln439_fu_393_p3[3:0];

assign xor_ln438_fu_355_p2 = (icmp_ln439_fu_255_p2 ^ 1'd1);

assign zext_ln439_1_fu_401_p1 = add_ln439_fu_381_p2;

assign zext_ln439_fu_219_p1 = ap_sig_allocacmp_w_1;

assign zext_ln441_1_fu_552_p1 = shl_ln1_fu_545_p3;

assign zext_ln441_2_fu_563_p1 = shl_ln441_1_fu_556_p3;

assign zext_ln441_3_fu_579_p1 = add_ln441_2_reg_638;

assign zext_ln441_4_fu_421_p1 = select_ln439_1_fu_413_p3;

assign zext_ln441_fu_541_p1 = add_ln441_reg_627;

endmodule //mydataset_lane_mydataset_lane_Pipeline_VITIS_LOOP_438_1_VITIS_LOOP_439_2_VITIS_LOOP_440_3
