// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mydataset_lane_mydataset_lane_Pipeline_VITIS_LOOP_298_1_VITIS_LOOP_299_2_VITIS_LOOP_300_31 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out3_V_address0,
        out3_V_ce0,
        out3_V_we0,
        out3_V_d0,
        out3_V_address1,
        out3_V_ce1,
        out3_V_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] out3_V_address0;
output   out3_V_ce0;
output   out3_V_we0;
output  [15:0] out3_V_d0;
output  [11:0] out3_V_address1;
output   out3_V_ce1;
input  [15:0] out3_V_q1;

reg ap_idle;
reg out3_V_ce0;
reg out3_V_we0;
reg out3_V_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln298_fu_126_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln298_reg_375;
reg   [0:0] icmp_ln298_reg_375_pp0_iter1_reg;
reg   [0:0] icmp_ln298_reg_375_pp0_iter2_reg;
wire   [0:0] icmp_ln299_fu_144_p2;
reg   [0:0] icmp_ln299_reg_379;
reg   [0:0] icmp_ln299_reg_379_pp0_iter1_reg;
reg   [0:0] icmp_ln299_reg_379_pp0_iter2_reg;
reg   [3:0] h_reg_392;
wire   [0:0] and_ln299_fu_224_p2;
reg   [0:0] and_ln299_reg_397;
wire   [3:0] add_ln299_fu_230_p2;
reg   [3:0] add_ln299_reg_402;
(* use_dsp48 = "no" *) wire   [11:0] add_ln301_1_fu_313_p2;
reg   [11:0] add_ln301_1_reg_412;
reg   [11:0] out3_V_addr_reg_417;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [63:0] zext_ln1548_fu_318_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] w_3_fu_60;
wire   [3:0] add_ln300_fu_261_p2;
wire    ap_loop_init;
reg   [3:0] h_3_fu_64;
wire   [3:0] select_ln299_5_fu_249_p3;
reg   [7:0] indvar_flatten242_fu_68;
wire   [7:0] select_ln299_6_fu_177_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten242_load_1;
reg   [7:0] ap_sig_allocacmp_indvar_flatten242_load;
reg   [4:0] c_fu_72;
wire   [4:0] select_ln299_1_fu_156_p3;
reg   [4:0] ap_sig_allocacmp_c_load;
reg   [11:0] indvar_flatten260_fu_76;
wire   [11:0] add_ln298_fu_132_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten260_load;
wire   [0:0] tmp_fu_322_p3;
wire   [4:0] add_ln298_1_fu_150_p2;
wire   [7:0] add_ln299_1_fu_171_p2;
wire   [0:0] icmp_ln300_fu_218_p2;
wire   [0:0] xor_ln299_fu_213_p2;
wire   [3:0] select_ln299_fu_206_p3;
wire   [0:0] or_ln299_fu_236_p2;
wire   [3:0] select_ln299_3_fu_241_p3;
wire   [3:0] empty_fu_280_p0;
wire   [4:0] empty_fu_280_p1;
wire   [7:0] empty_fu_280_p2;
wire   [3:0] p_mid1240_fu_296_p0;
wire   [4:0] p_mid1240_fu_296_p1;
wire   [7:0] p_mid1240_fu_296_p2;
wire   [7:0] select_ln299_2_fu_286_p3;
wire   [7:0] select_ln299_4_fu_302_p3;
wire   [11:0] grp_fu_330_p3;
wire   [11:0] select_ln299_11_cast_fu_309_p1;
wire   [4:0] grp_fu_330_p0;
wire   [7:0] grp_fu_330_p1;
wire   [3:0] grp_fu_330_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [7:0] empty_fu_280_p00;
wire   [11:0] grp_fu_330_p00;
wire   [11:0] grp_fu_330_p20;
wire   [7:0] p_mid1240_fu_296_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mydataset_lane_mul_4ns_5ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mul_4ns_5ns_8_1_1_U38(
    .din0(empty_fu_280_p0),
    .din1(empty_fu_280_p1),
    .dout(empty_fu_280_p2)
);

mydataset_lane_mul_4ns_5ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mul_4ns_5ns_8_1_1_U39(
    .din0(p_mid1240_fu_296_p0),
    .din1(p_mid1240_fu_296_p1),
    .dout(p_mid1240_fu_296_p2)
);

mydataset_lane_mac_muladd_5ns_8ns_4ns_12_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 12 ))
mac_muladd_5ns_8ns_4ns_12_4_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_330_p0),
    .din1(grp_fu_330_p1),
    .din2(grp_fu_330_p2),
    .ce(1'b1),
    .dout(grp_fu_330_p3)
);

mydataset_lane_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln298_fu_126_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c_fu_72 <= select_ln299_1_fu_156_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_72 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            h_3_fu_64 <= 4'd0;
        end else if (((icmp_ln298_reg_375_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            h_3_fu_64 <= select_ln299_5_fu_249_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln298_fu_126_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten242_fu_68 <= select_ln299_6_fu_177_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten242_fu_68 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln298_fu_126_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten260_fu_76 <= add_ln298_fu_132_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten260_fu_76 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            w_3_fu_60 <= 4'd0;
        end else if (((icmp_ln298_reg_375_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            w_3_fu_60 <= add_ln300_fu_261_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln298_reg_375_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln299_reg_402 <= add_ln299_fu_230_p2;
        and_ln299_reg_397 <= and_ln299_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln298_reg_375_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln301_1_reg_412 <= add_ln301_1_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln298_reg_375 <= icmp_ln298_fu_126_p2;
        icmp_ln298_reg_375_pp0_iter1_reg <= icmp_ln298_reg_375;
        icmp_ln299_reg_379_pp0_iter1_reg <= icmp_ln299_reg_379;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        h_reg_392 <= h_3_fu_64;
        icmp_ln298_reg_375_pp0_iter2_reg <= icmp_ln298_reg_375_pp0_iter1_reg;
        icmp_ln299_reg_379_pp0_iter2_reg <= icmp_ln299_reg_379_pp0_iter1_reg;
        out3_V_addr_reg_417 <= zext_ln1548_fu_318_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln298_fu_126_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln299_reg_379 <= icmp_ln299_fu_144_p2;
    end
end

always @ (*) begin
    if (((icmp_ln298_fu_126_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln298_reg_375_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_c_load = 5'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten242_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten242_load = indvar_flatten242_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten242_load_1 = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten242_load_1 = indvar_flatten242_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten260_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten260_load = indvar_flatten260_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out3_V_ce0 = 1'b1;
    end else begin
        out3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out3_V_ce1 = 1'b1;
    end else begin
        out3_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (tmp_fu_322_p3 == 1'd1))) begin
        out3_V_we0 = 1'b1;
    end else begin
        out3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln298_1_fu_150_p2 = (ap_sig_allocacmp_c_load + 5'd1);

assign add_ln298_fu_132_p2 = (ap_sig_allocacmp_indvar_flatten260_load + 12'd1);

assign add_ln299_1_fu_171_p2 = (ap_sig_allocacmp_indvar_flatten242_load + 8'd1);

assign add_ln299_fu_230_p2 = (select_ln299_fu_206_p3 + 4'd1);

assign add_ln300_fu_261_p2 = (select_ln299_3_fu_241_p3 + 4'd1);

assign add_ln301_1_fu_313_p2 = (grp_fu_330_p3 + select_ln299_11_cast_fu_309_p1);

assign and_ln299_fu_224_p2 = (xor_ln299_fu_213_p2 & icmp_ln300_fu_218_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_280_p0 = empty_fu_280_p00;

assign empty_fu_280_p00 = h_reg_392;

assign empty_fu_280_p1 = 8'd13;

assign grp_fu_330_p0 = grp_fu_330_p00;

assign grp_fu_330_p00 = select_ln299_1_fu_156_p3;

assign grp_fu_330_p1 = 12'd169;

assign grp_fu_330_p2 = grp_fu_330_p20;

assign grp_fu_330_p20 = select_ln299_3_fu_241_p3;

assign icmp_ln298_fu_126_p2 = ((ap_sig_allocacmp_indvar_flatten260_load == 12'd2704) ? 1'b1 : 1'b0);

assign icmp_ln299_fu_144_p2 = ((ap_sig_allocacmp_indvar_flatten242_load_1 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln300_fu_218_p2 = ((w_3_fu_60 == 4'd13) ? 1'b1 : 1'b0);

assign or_ln299_fu_236_p2 = (icmp_ln299_reg_379_pp0_iter1_reg | and_ln299_fu_224_p2);

assign out3_V_address0 = out3_V_addr_reg_417;

assign out3_V_address1 = zext_ln1548_fu_318_p1;

assign out3_V_d0 = 16'd0;

assign p_mid1240_fu_296_p0 = p_mid1240_fu_296_p00;

assign p_mid1240_fu_296_p00 = add_ln299_reg_402;

assign p_mid1240_fu_296_p1 = 8'd13;

assign select_ln299_11_cast_fu_309_p1 = select_ln299_4_fu_302_p3;

assign select_ln299_1_fu_156_p3 = ((icmp_ln299_fu_144_p2[0:0] == 1'b1) ? add_ln298_1_fu_150_p2 : ap_sig_allocacmp_c_load);

assign select_ln299_2_fu_286_p3 = ((icmp_ln299_reg_379_pp0_iter2_reg[0:0] == 1'b1) ? 8'd0 : empty_fu_280_p2);

assign select_ln299_3_fu_241_p3 = ((or_ln299_fu_236_p2[0:0] == 1'b1) ? 4'd0 : w_3_fu_60);

assign select_ln299_4_fu_302_p3 = ((and_ln299_reg_397[0:0] == 1'b1) ? p_mid1240_fu_296_p2 : select_ln299_2_fu_286_p3);

assign select_ln299_5_fu_249_p3 = ((and_ln299_fu_224_p2[0:0] == 1'b1) ? add_ln299_fu_230_p2 : select_ln299_fu_206_p3);

assign select_ln299_6_fu_177_p3 = ((icmp_ln299_fu_144_p2[0:0] == 1'b1) ? 8'd1 : add_ln299_1_fu_171_p2);

assign select_ln299_fu_206_p3 = ((icmp_ln299_reg_379_pp0_iter1_reg[0:0] == 1'b1) ? 4'd0 : h_3_fu_64);

assign tmp_fu_322_p3 = out3_V_q1[32'd15];

assign xor_ln299_fu_213_p2 = (icmp_ln299_reg_379_pp0_iter1_reg ^ 1'd1);

assign zext_ln1548_fu_318_p1 = add_ln301_1_reg_412;

endmodule //mydataset_lane_mydataset_lane_Pipeline_VITIS_LOOP_298_1_VITIS_LOOP_299_2_VITIS_LOOP_300_31
